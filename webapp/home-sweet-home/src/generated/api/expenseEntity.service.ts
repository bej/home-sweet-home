/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Expense } from '../model/expense';
import { ResourceAccount } from '../model/resourceAccount';
import { ResourceExpense } from '../model/resourceExpense';
import { ResourcesExpense } from '../model/resourcesExpense';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ExpenseEntityService {

    protected basePath = 'https://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * deleteExpense
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteExpenseUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteExpenseUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteExpenseUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteExpenseUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteExpenseUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/expenses/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * expenseAccount
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public expenseAccountUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public expenseAccountUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public expenseAccountUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public expenseAccountUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling expenseAccountUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/expenses/${encodeURIComponent(String(id))}/account`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * expenseAccount
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public expenseAccountUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<ResourceAccount>;
    public expenseAccountUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceAccount>>;
    public expenseAccountUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceAccount>>;
    public expenseAccountUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling expenseAccountUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/hal+json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ResourceAccount>(`${this.basePath}/expenses/${encodeURIComponent(String(id))}/account`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * expenseAccount
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public expenseAccountUsingPATCH(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<ResourceAccount>;
    public expenseAccountUsingPATCH(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceAccount>>;
    public expenseAccountUsingPATCH(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceAccount>>;
    public expenseAccountUsingPATCH(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling expenseAccountUsingPATCH.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling expenseAccountUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.patch<ResourceAccount>(`${this.basePath}/expenses/${encodeURIComponent(String(id))}/account`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * expenseAccount
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public expenseAccountUsingPOST(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<ResourceAccount>;
    public expenseAccountUsingPOST(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceAccount>>;
    public expenseAccountUsingPOST(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceAccount>>;
    public expenseAccountUsingPOST(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling expenseAccountUsingPOST.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling expenseAccountUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<ResourceAccount>(`${this.basePath}/expenses/${encodeURIComponent(String(id))}/account`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * expenseAccount
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public expenseAccountUsingPUT(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<ResourceAccount>;
    public expenseAccountUsingPUT(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceAccount>>;
    public expenseAccountUsingPUT(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceAccount>>;
    public expenseAccountUsingPUT(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling expenseAccountUsingPUT.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling expenseAccountUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<ResourceAccount>(`${this.basePath}/expenses/${encodeURIComponent(String(id))}/account`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findAllCompleteExpensesByAccountExpense
     * 
     * @param account account
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllCompleteExpensesByAccountExpenseUsingGET(account?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourcesExpense>;
    public findAllCompleteExpensesByAccountExpenseUsingGET(account?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourcesExpense>>;
    public findAllCompleteExpensesByAccountExpenseUsingGET(account?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourcesExpense>>;
    public findAllCompleteExpensesByAccountExpenseUsingGET(account?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (account !== undefined) {
            queryParameters = queryParameters.set('account', <any>account);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ResourcesExpense>(`${this.basePath}/expenses/search/findAllCompleteExpensesByAccount`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findAllExpense
     * 
     * @param page page
     * @param size size
     * @param sort sort
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllExpenseUsingGET(page?: string, size?: string, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourcesExpense>;
    public findAllExpenseUsingGET(page?: string, size?: string, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourcesExpense>>;
    public findAllExpenseUsingGET(page?: string, size?: string, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourcesExpense>>;
    public findAllExpenseUsingGET(page?: string, size?: string, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sort !== undefined) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/hal+json',
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ResourcesExpense>(`${this.basePath}/expenses`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findAllIncompleteExpensesByAccountExpense
     * 
     * @param account account
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllIncompleteExpensesByAccountExpenseUsingGET(account?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourcesExpense>;
    public findAllIncompleteExpensesByAccountExpenseUsingGET(account?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourcesExpense>>;
    public findAllIncompleteExpensesByAccountExpenseUsingGET(account?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourcesExpense>>;
    public findAllIncompleteExpensesByAccountExpenseUsingGET(account?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (account !== undefined) {
            queryParameters = queryParameters.set('account', <any>account);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ResourcesExpense>(`${this.basePath}/expenses/search/findAllIncompleteExpensesByAccount`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findByAccountNameExpense
     * 
     * @param param0 param0
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByAccountNameExpenseUsingGET(param0?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourcesExpense>;
    public findByAccountNameExpenseUsingGET(param0?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourcesExpense>>;
    public findByAccountNameExpenseUsingGET(param0?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourcesExpense>>;
    public findByAccountNameExpenseUsingGET(param0?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (param0 !== undefined) {
            queryParameters = queryParameters.set('param0', <any>param0);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ResourcesExpense>(`${this.basePath}/expenses/search/findByAccountName`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findByIdExpense
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByIdExpenseUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<ResourceExpense>;
    public findByIdExpenseUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceExpense>>;
    public findByIdExpenseUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceExpense>>;
    public findByIdExpenseUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findByIdExpenseUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ResourceExpense>(`${this.basePath}/expenses/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findOneByAccountAndTitleExpense
     * 
     * @param name 
     * @param param1 param1
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findOneByAccountAndTitleExpenseUsingGET(name?: string, param1?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceExpense>;
    public findOneByAccountAndTitleExpenseUsingGET(name?: string, param1?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceExpense>>;
    public findOneByAccountAndTitleExpenseUsingGET(name?: string, param1?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceExpense>>;
    public findOneByAccountAndTitleExpenseUsingGET(name?: string, param1?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (param1 !== undefined) {
            queryParameters = queryParameters.set('param1', <any>param1);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ResourceExpense>(`${this.basePath}/expenses/search/findOneByAccountAndTitle`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveExpense
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveExpenseUsingPATCH(body: Expense, id: number, observe?: 'body', reportProgress?: boolean): Observable<ResourceExpense>;
    public saveExpenseUsingPATCH(body: Expense, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceExpense>>;
    public saveExpenseUsingPATCH(body: Expense, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceExpense>>;
    public saveExpenseUsingPATCH(body: Expense, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling saveExpenseUsingPATCH.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling saveExpenseUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.patch<ResourceExpense>(`${this.basePath}/expenses/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveExpense
     * 
     * @param body body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveExpenseUsingPOST(body: Expense, observe?: 'body', reportProgress?: boolean): Observable<ResourceExpense>;
    public saveExpenseUsingPOST(body: Expense, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceExpense>>;
    public saveExpenseUsingPOST(body: Expense, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceExpense>>;
    public saveExpenseUsingPOST(body: Expense, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling saveExpenseUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<ResourceExpense>(`${this.basePath}/expenses`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveExpense
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveExpenseUsingPUT(body: Expense, id: number, observe?: 'body', reportProgress?: boolean): Observable<ResourceExpense>;
    public saveExpenseUsingPUT(body: Expense, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceExpense>>;
    public saveExpenseUsingPUT(body: Expense, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceExpense>>;
    public saveExpenseUsingPUT(body: Expense, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling saveExpenseUsingPUT.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling saveExpenseUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<ResourceExpense>(`${this.basePath}/expenses/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
